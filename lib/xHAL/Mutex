#pragma once
extern "C" {
#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>
}
#include "board_common.h"

namespace xHAL {

class Mutex {
    StaticSemaphore_t mutex;
    bool recursive;

public:
    TaskHandle_t holder;

    Mutex(bool recursive = false);

    bool lock(const u32 deadline = getDeadline());

    bool unlock();
};

class AutoLock {
    Mutex &mutex;
    bool success;

public:
    AutoLock(Mutex &m, u32 deadline = getDeadline()) : mutex(m) {
        success = (mutex.lock(deadline) == pdTRUE);
    }

    bool successful() { return success; }

    ~AutoLock() {
        if (success && !mutex.unlock())
            FailAndInfiniteLoop();
    }
};

}