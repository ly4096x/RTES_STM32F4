#pragma once
#include "board_common.h"
#include <FreeRTOS.h>
#include <xHAL/Mutex>
#include <TaskNotificationIds.h>
#include <stm32f4xx_ll_i2c.h>

#define LOG_I2C_EMPTY_INT 0

namespace xHAL {

class I2C {
protected:
    I2C_TypeDef *dev;
    Mutex mutex;
    TaskHandle_t caller;
    const TaskNotificationId notifyId;

    enum I2C_State : u8 {
        STATE_STOPPED,
        STATE_WAITING_START,
        STATE_WAITING_ADDR,
        STATE_WAITING_TXE,
        STATE_WAITING_RXNE,
        STATE_WAITING_TX_STOP,
        STATE_ERROR
    } state;

    struct {
        u8 addr;
        u8 *data;
        u8 *data_ptr;
        u16 len;
        bool isRead;
        bool genStop;
    } cmd;

    bool isError();
    void clearInterruptFlags();

public:
    I2C(I2C_TypeDef *dev, const TaskNotificationId _notifyId = NOTIFY_INVALID_VALUE);

    u16 startTransaction(u8 slaveAddr, bool isRead, u8 *data, u16 len, bool genStop, u32 deadline = getDeadline());

    void interruptHandler(bool err);
};

}