#pragma once
#include "board_common.h"
#include <FreeRTOS.h>
#include <xHAL/DMA>
#include <xHAL/Mutex>
#include <TaskNotificationIds.h>
#include <cstdarg>

namespace xHAL {

class SerialDevice {
    size_t _vprintf(const char *format, va_list va);
    size_t _out_rev(const char *buf, size_t len, unsigned int width, unsigned int flags);
    size_t _ntoa_format(char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags);
    size_t _ntoa_long(unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags);
    size_t _ftoa(double value, unsigned int prec, unsigned int width, unsigned int flags);
    size_t _etoa(double value, unsigned int prec, unsigned int width, unsigned int flags);

protected:
    Mutex txMutex, rxMutex;
    TaskHandle_t txCaller, rxCaller;
    const TaskNotificationId txNotifyId, rxNotifyId;

    u8 rxbuf[64];
    char txbuf[64], *txbuf_end;
    u8 *rxbuf_begin, *rxbuf_end;
    bool rxEcho;

    u32 writeToBulk(char *data, u32 len, u32 deadline = getDeadline());
    u32 writeCharToBulk(char c, bool flush = false, u32 deadline = getDeadline());

public:
    SerialDevice(const TaskNotificationId _txNotifyId = NOTIFY_INVALID_VALUE, const TaskNotificationId _rxNotifyId = NOTIFY_INVALID_VALUE);

    virtual u32 write(u8 *data, u32 len, u32 deadline = getDeadline()) = 0;
    u32 printf(const char *fmt, ...);
    char getChar(u32 deadline, bool waitForever);
    char peekChar(u32 deadline, bool waitForever);
    u32 readline(char *dst, const u32 maxLength, u32 deadline = getDeadline(), bool waitForever = true);
    void setEcho(const bool shouldEcho) {
        rxEcho=shouldEcho;
    }

    virtual void txInterruptHandler() = 0;
    virtual void rxInterruptHandler() = 0;
};

}