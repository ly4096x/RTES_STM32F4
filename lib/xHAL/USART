#pragma once
extern "C" {
#include <stm32f4xx_ll_usart.h>
#include <FreeRTOS.h>
#include <task.h>
}
#include "board_common.h"
#include <xHAL/SerialDevice>
#include <TaskNotificationIds.h>

namespace xHAL {

class USART : public SerialDevice {
    USART_TypeDef *dev;
    DMA *dmaTx;

    u8 *tx_data_begin, *tx_data_end;

public:
    USART(USART_TypeDef *dev, DMA *dmaTx = nullptr, const TaskNotificationIds _txNotifyId = INVALID_NOTIFY_VALUE, const TaskNotificationIds _rxNotifyId = INVALID_NOTIFY_VALUE);

    u32 write(u8 *data, u32 len, u32 deadline = getDeadline()) {
        return isInISR() ?
                writeWithPolling(data, len, deadline) :
                writeWithDma(data, len, deadline);
    }
    u32 writeWithPolling(u8 *data, u32 len, u32 deadline = getDeadline());
    u32 writeWithInterrupt(u8 *data, u32 len, u32 deadline = getDeadline());
    u32 writeWithDma(u8 *data, u32 len, u32 deadline = getDeadline());

    void txInterruptHandler();
    void rxInterruptHandler();
};

}